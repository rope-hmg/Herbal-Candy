#![allow(non_camel_case_types)]

pub struct R_Type_Fields {
    pub rd:   bool,
    pub rs1:  bool,
    pub rs2:  bool,
    pub size: bool,
    pub f:    bool,
    pub s:    bool,
}

pub struct R_Type_Conditions {
    pub size: Option<u8>,
    pub f:    Option<u8>,
    pub s:    Option<u8>,
}

pub struct I_Type_Fields {
    pub rd:  bool,
    pub imm: bool,
}

macro_rules! instr {
    (v_type => $name:expr, $op_code:expr, $funct:expr) => {
        ($name, Instr::V_Type {
            op_code: $op_code,
            funct:   $funct,
        })
    };

    (r_type => $name:expr, $op_code:expr, $funct:expr, [ $($field:ident),* ], { $($condition:ident : $value:expr),* }) => {
        ($name, Instr::R_Type {
            op_code: $op_code,
            funct:   $funct,
            fields:  {
                #[allow(unused_mut)]
                let mut fields = R_Type_Fields {
                    rd:   false,
                    rs1:  false,
                    rs2:  false,
                    size: false,
                    f:    false,
                    s:    false,
                };

                $(fields.$field = true;)*

                fields
            },
            conditions: {
                #[allow(unused_mut)]
                let mut conditions = R_Type_Conditions {
                    size: None,
                    f:    None,
                    s:    None,
                };

                $(conditions.$condition = Some($value);)*

                conditions
            }
        })
    };

    (i_type => $name:expr, $op_code:expr, $funct:expr, [ $($field:ident),* ]) => {
        ($name, Instr::I_Type {
            op_code: $op_code,
            funct:   $funct,
            fields:  {
                #[allow(unused_mut)]
                let mut fields = I_Type_Fields {
                    rd:  false,
                    imm: false,
                };

                $(fields.$field = true;)*

                fields
            },
        })
    };
}

/// Instruction Layout:
/// ```notrust
///         MSB                                                           LSB
///         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
/// V-Type |-------------------------------------------|funct  |op code    |
/// R-Type |S|F|siz|register 2 |register 1 |register 0 |funct  |op code    |
/// I-Type |16 bit immediate               |register   |funct  |op code    |
/// ```
pub enum Instr {
    V_Type {
        op_code: u8,
        funct:   u8,
    },
    R_Type {
        op_code:    u8,
        funct:      u8,
        fields:     R_Type_Fields,
        conditions: R_Type_Conditions,
    },
    I_Type {
        op_code: u8,
        funct:   u8,
        fields:  I_Type_Fields,
    },
}

pub static INSTRUCTIONS: &[(&str, Instr)] = &[
    // Control Flow
    // ------------
    instr!(v_type => "halt",  0b000000, 0x0),
    instr!(v_type => "trap",  0b000000, 0x1),
    instr!(r_type => "call",  0b000000, 0x2, [rs2], { s: 0 }),
    instr!(r_type => "callr", 0b000000, 0x2, [rs2], { s: 1 }),
    instr!(i_type => "calli", 0b000000, 0x3, [imm]          ),
    instr!(v_type => "ret",   0b000000, 0x4),
    instr!(i_type => "ecall", 0b000000, 0x5, [imm]),
    instr!(v_type => "break", 0b000000, 0x6),
    instr!(r_type => "jal",   0b000000, 0x7, [rs2     ], { s: 0 }),
    instr!(r_type => "jalr",  0b000000, 0x7, [rs2     ], { s: 1 }),
    instr!(i_type => "jali",  0b000000, 0x8, [imm     ]          ),
    instr!(r_type => "jnz",   0b000000, 0x9, [rs2, rs1], { s: 0 }),
    instr!(r_type => "jnzr",  0b000000, 0x9, [rs2, rs1], { s: 1 }),
    instr!(i_type => "jnzi",  0b000000, 0xA, [imm, rd ]          ),
    instr!(r_type => "jiz",   0b000000, 0xB, [rs2, rs1], { s: 0 }),
    instr!(r_type => "jizr",  0b000000, 0xB, [rs2, rs1], { s: 1 }),
    instr!(i_type => "jizi",  0b000000, 0xC, [imm, rd ]          ),
    // Memory
    // ------
    instr!(r_type => "load.8",    0b000001, 0x0, [rs1, rd], { size: 8  }),
    instr!(r_type => "load.16",   0b000001, 0x0, [rs1, rd], { size: 16 }),
    instr!(r_type => "load.32",   0b000001, 0x0, [rs1, rd], { size: 32 }),
    instr!(r_type => "load.64",   0b000001, 0x0, [rs1, rd], { size: 64 }),
    instr!(i_type => "loadi",     0b000001, 0x1, [imm, rd]              ),
    instr!(i_type => "loada.8",   0b000001, 0x2, [imm, rd]              ),
    instr!(i_type => "loada.16",  0b000001, 0x3, [imm, rd]              ),
    instr!(i_type => "loada.32",  0b000001, 0x4, [imm, rd]              ),
    instr!(i_type => "loada.64",  0b000001, 0x5, [imm, rd]              ),
    instr!(r_type => "store.8",   0b000001, 0x6, [rs1, rd], { size: 8  }),
    instr!(r_type => "store.16",  0b000001, 0x6, [rs1, rd], { size: 16 }),
    instr!(r_type => "store.32",  0b000001, 0x6, [rs1, rd], { size: 32 }),
    instr!(r_type => "store.64",  0b000001, 0x6, [rs1, rd], { size: 64 }),
    instr!(i_type => "storei",    0b000001, 0x7, [imm, rd]              ),
    instr!(r_type => "move",      0b000001, 0x8, [rs1, rd], {          }),
    instr!(i_type => "push",      0b000001, 0x9, [     rd]              ),
    instr!(i_type => "pushi",     0b000001, 0xA, [imm    ]              ),
    instr!(i_type => "pop",       0b000001, 0xB, [     rd]              ),
    // Comparison
    // ----------
    instr!(r_type => "ie",     0b000010, 0x0, [rs2, rs1, rd], {           f: 0 }),
    instr!(r_type => "ie.f32", 0b000010, 0x0, [rs2, rs1, rd], { size: 32, f: 1 }),
    instr!(r_type => "ie.f64", 0b000010, 0x0, [rs2, rs1, rd], { size: 64, f: 1 }),
    instr!(r_type => "ne",     0b000010, 0x1, [rs2, rs1, rd], {           f: 0 }),
    instr!(r_type => "ne.f32", 0b000010, 0x1, [rs2, rs1, rd], { size: 32, f: 1 }),
    instr!(r_type => "ne.f64", 0b000010, 0x1, [rs2, rs1, rd], { size: 64, f: 1 }),
    instr!(r_type => "lt",     0b000010, 0x2, [rs2, rs1, rd], {           f: 0 }),
    instr!(r_type => "lt.f32", 0b000010, 0x2, [rs2, rs1, rd], { size: 32, f: 1 }),
    instr!(r_type => "lt.f64", 0b000010, 0x2, [rs2, rs1, rd], { size: 64, f: 1 }),
    instr!(r_type => "le",     0b000010, 0x3, [rs2, rs1, rd], {           f: 0 }),
    instr!(r_type => "le.f32", 0b000010, 0x3, [rs2, rs1, rd], { size: 32, f: 1 }),
    instr!(r_type => "le.f64", 0b000010, 0x3, [rs2, rs1, rd], { size: 64, f: 1 }),
    instr!(r_type => "gt",     0b000010, 0x4, [rs2, rs1, rd], {           f: 0 }),
    instr!(r_type => "gt.f32", 0b000010, 0x4, [rs2, rs1, rd], { size: 32, f: 1 }),
    instr!(r_type => "gt.f64", 0b000010, 0x4, [rs2, rs1, rd], { size: 64, f: 1 }),
    instr!(r_type => "ge",     0b000010, 0x5, [rs2, rs1, rd], {           f: 0 }),
    instr!(r_type => "ge.f32", 0b000010, 0x5, [rs2, rs1, rd], { size: 32, f: 1 }),
    instr!(r_type => "ge.f64", 0b000010, 0x5, [rs2, rs1, rd], { size: 64, f: 1 }),
    // Bitwise
    // -------
    instr!(r_type => "and.i8",             0b000011, 0x0, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "and.i16",            0b000011, 0x0, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "and.i32",            0b000011, 0x0, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "and.i64",            0b000011, 0x0, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "and.u8",             0b000011, 0x0, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "and.u16",            0b000011, 0x0, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "and.u32",            0b000011, 0x0, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "and.u64",            0b000011, 0x0, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "or.i8",              0b000011, 0x1, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "or.i16",             0b000011, 0x1, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "or.i32",             0b000011, 0x1, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "or.i64",             0b000011, 0x1, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "or.u8",              0b000011, 0x1, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "or.u16",             0b000011, 0x1, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "or.u32",             0b000011, 0x1, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "or.u64",             0b000011, 0x1, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "xor.i8",             0b000011, 0x2, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "xor.i16",            0b000011, 0x2, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "xor.i32",            0b000011, 0x2, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "xor.i64",            0b000011, 0x2, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "xor.u8",             0b000011, 0x2, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "xor.u16",            0b000011, 0x2, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "xor.u32",            0b000011, 0x2, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "xor.u64",            0b000011, 0x2, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "not.i8",             0b000011, 0x3, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "not.i16",            0b000011, 0x3, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "not.i32",            0b000011, 0x3, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "not.i64",            0b000011, 0x3, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "not.u8",             0b000011, 0x3, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "not.u16",            0b000011, 0x3, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "not.u32",            0b000011, 0x3, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "not.u64",            0b000011, 0x3, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "shl.i8",             0b000011, 0x4, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "shl.i16",            0b000011, 0x4, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "shl.i32",            0b000011, 0x4, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "shl.i64",            0b000011, 0x4, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "shl.u8",             0b000011, 0x4, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "shl.u16",            0b000011, 0x4, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "shl.u32",            0b000011, 0x4, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "shl.u64",            0b000011, 0x4, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "shr.i8",             0b000011, 0x5, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "shr.i16",            0b000011, 0x5, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "shr.i32",            0b000011, 0x5, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "shr.i64",            0b000011, 0x5, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "shr.u8",             0b000011, 0x5, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "shr.u16",            0b000011, 0x5, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "shr.u32",            0b000011, 0x5, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "shr.u64",            0b000011, 0x5, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "rotl.i8",            0b000011, 0x6, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "rotl.i16",           0b000011, 0x6, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "rotl.i32",           0b000011, 0x6, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "rotl.i64",           0b000011, 0x6, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "rotl.u8",            0b000011, 0x6, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "rotl.u16",           0b000011, 0x6, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "rotl.u32",           0b000011, 0x6, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "rotl.u64",           0b000011, 0x6, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "rotr.i8",            0b000011, 0x7, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "rotr.i16",           0b000011, 0x7, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "rotr.i32",           0b000011, 0x7, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "rotr.i64",           0b000011, 0x7, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "rotr.u8",            0b000011, 0x7, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "rotr.u16",           0b000011, 0x7, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "rotr.u32",           0b000011, 0x7, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "rotr.u64",           0b000011, 0x7, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "count_ones.i8",      0b000011, 0x8, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "count_ones.i16",     0b000011, 0x8, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "count_ones.i32",     0b000011, 0x8, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "count_ones.i64",     0b000011, 0x8, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "count_ones.u8",      0b000011, 0x8, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "count_ones.u16",     0b000011, 0x8, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "count_ones.u32",     0b000011, 0x8, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "count_ones.u64",     0b000011, 0x8, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "leading_ones.i8",    0b000011, 0x9, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "leading_ones.i16",   0b000011, 0x9, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "leading_ones.i32",   0b000011, 0x9, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "leading_ones.i64",   0b000011, 0x9, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "leading_ones.u8",    0b000011, 0x9, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "leading_ones.u16",   0b000011, 0x9, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "leading_ones.u32",   0b000011, 0x9, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "leading_ones.u64",   0b000011, 0x9, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "trailing_ones.i8",   0b000011, 0xA, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "trailing_ones.i16",  0b000011, 0xA, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "trailing_ones.i32",  0b000011, 0xA, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "trailing_ones.i64",  0b000011, 0xA, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "trailing_ones.u8",   0b000011, 0xA, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "trailing_ones.u16",  0b000011, 0xA, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "trailing_ones.u32",  0b000011, 0xA, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "trailing_ones.u64",  0b000011, 0xA, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "count_zeros.i8",     0b000011, 0xB, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "count_zeros.i16",    0b000011, 0xB, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "count_zeros.i32",    0b000011, 0xB, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "count_zeros.i64",    0b000011, 0xB, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "count_zeros.u8",     0b000011, 0xB, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "count_zeros.u16",    0b000011, 0xB, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "count_zeros.u32",    0b000011, 0xB, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "count_zeros.u64",    0b000011, 0xB, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "leading_zeros.i8",   0b000011, 0xC, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "leading_zeros.i16",  0b000011, 0xC, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "leading_zeros.i32",  0b000011, 0xC, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "leading_zeros.i64",  0b000011, 0xC, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "leading_zeros.u8",   0b000011, 0xC, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "leading_zeros.u16",  0b000011, 0xC, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "leading_zeros.u32",  0b000011, 0xC, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "leading_zeros.u64",  0b000011, 0xC, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "trailing_zeros.i8",  0b000011, 0xD, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "trailing_zeros.i16", 0b000011, 0xD, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "trailing_zeros.i32", 0b000011, 0xD, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "trailing_zeros.i64", 0b000011, 0xD, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "trailing_zeros.u8",  0b000011, 0xD, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "trailing_zeros.u16", 0b000011, 0xD, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "trailing_zeros.u32", 0b000011, 0xD, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "trailing_zeros.u64", 0b000011, 0xD, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "reverse_bytes.i8",   0b000011, 0xE, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "reverse_bytes.i16",  0b000011, 0xE, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "reverse_bytes.i32",  0b000011, 0xE, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "reverse_bytes.i64",  0b000011, 0xE, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "reverse_bytes.u8",   0b000011, 0xE, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "reverse_bytes.u16",  0b000011, 0xE, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "reverse_bytes.u32",  0b000011, 0xE, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "reverse_bytes.u64",  0b000011, 0xE, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "reverse_bits.i8",    0b000011, 0xF, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "reverse_bits.i16",   0b000011, 0xF, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "reverse_bits.i32",   0b000011, 0xF, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "reverse_bits.i64",   0b000011, 0xF, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "reverse_bits.u8",    0b000011, 0xF, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "reverse_bits.u16",   0b000011, 0xF, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "reverse_bits.u32",   0b000011, 0xF, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "reverse_bits.u64",   0b000011, 0xF, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    // Checked Arithmetic
    // ------------------
    instr!(r_type => "c_abs.i8",    0b000100, 0x0, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_abs.i16",   0b000100, 0x0, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_abs.i32",   0b000100, 0x0, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_abs.i64",   0b000100, 0x0, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_add.i8",    0b000100, 0x1, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_add.i16",   0b000100, 0x1, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_add.i32",   0b000100, 0x1, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_add.i64",   0b000100, 0x1, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_add.u8",    0b000100, 0x1, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_add.u16",   0b000100, 0x1, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_add.u32",   0b000100, 0x1, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_add.u64",   0b000100, 0x1, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_add_u.i8",  0b000100, 0x2, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_add_u.i16", 0b000100, 0x2, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_add_u.i32", 0b000100, 0x2, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_add_u.i64", 0b000100, 0x2, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_add_s.u8",  0b000100, 0x2, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_add_s.u16", 0b000100, 0x2, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_add_s.u32", 0b000100, 0x2, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_add_s.u64", 0b000100, 0x2, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_div.i8",    0b000100, 0x3, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_div.i16",   0b000100, 0x3, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_div.i32",   0b000100, 0x3, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_div.i64",   0b000100, 0x3, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_div.u8",    0b000100, 0x3, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_div.u16",   0b000100, 0x3, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_div.u32",   0b000100, 0x3, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_div.u64",   0b000100, 0x3, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_div_e.i8",  0b000100, 0x4, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_div_e.i16", 0b000100, 0x4, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_div_e.i32", 0b000100, 0x4, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_div_e.i64", 0b000100, 0x4, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_div_e.u8",  0b000100, 0x4, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_div_e.u16", 0b000100, 0x4, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_div_e.u32", 0b000100, 0x4, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_div_e.u64", 0b000100, 0x4, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_log.i8",    0b000100, 0x5, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_log.i16",   0b000100, 0x5, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_log.i32",   0b000100, 0x5, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_log.i64",   0b000100, 0x5, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_log.u8",    0b000100, 0x5, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_log.u16",   0b000100, 0x5, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_log.u32",   0b000100, 0x5, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_log.u64",   0b000100, 0x5, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_sqrt.i8",   0b000100, 0x6, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_sqrt.i16",  0b000100, 0x6, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_sqrt.i32",  0b000100, 0x6, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_sqrt.i64",  0b000100, 0x6, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_sqrt.u8",   0b000100, 0x6, [     rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_sqrt.u16",  0b000100, 0x6, [     rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_sqrt.u32",  0b000100, 0x6, [     rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_sqrt.u64",  0b000100, 0x6, [     rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_mul.i8",    0b000100, 0x7, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_mul.i16",   0b000100, 0x7, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_mul.i32",   0b000100, 0x7, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_mul.i64",   0b000100, 0x7, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_mul.u8",    0b000100, 0x7, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_mul.u16",   0b000100, 0x7, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_mul.u32",   0b000100, 0x7, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_mul.u64",   0b000100, 0x7, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_neg.i8",    0b000100, 0x8, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_neg.i16",   0b000100, 0x8, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_neg.i32",   0b000100, 0x8, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_neg.i64",   0b000100, 0x8, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_pow.i8",    0b000100, 0x9, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_pow.i16",   0b000100, 0x9, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_pow.i32",   0b000100, 0x9, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_pow.i64",   0b000100, 0x9, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_pow.u8",    0b000100, 0x9, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_pow.u16",   0b000100, 0x9, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_pow.u32",   0b000100, 0x9, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_pow.u64",   0b000100, 0x9, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_rem.i8",    0b000100, 0xA, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_rem.i16",   0b000100, 0xA, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_rem.i32",   0b000100, 0xA, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_rem.i64",   0b000100, 0xA, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_rem.u8",    0b000100, 0xA, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_rem.u16",   0b000100, 0xA, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_rem.u32",   0b000100, 0xA, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_rem.u64",   0b000100, 0xA, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_rem_e.i8",  0b000100, 0xB, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_rem_e.i16", 0b000100, 0xB, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_rem_e.i32", 0b000100, 0xB, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_rem_e.i64", 0b000100, 0xB, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_rem_e.u8",  0b000100, 0xB, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_rem_e.u16", 0b000100, 0xB, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_rem_e.u32", 0b000100, 0xB, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_rem_e.u64", 0b000100, 0xB, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_shl.i8",    0b000100, 0xC, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_shl.i16",   0b000100, 0xC, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_shl.i32",   0b000100, 0xC, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_shl.i64",   0b000100, 0xC, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_shl.u8",    0b000100, 0xC, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_shl.u16",   0b000100, 0xC, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_shl.u32",   0b000100, 0xC, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_shl.u64",   0b000100, 0xC, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_shr.i8",    0b000100, 0xD, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_shr.i16",   0b000100, 0xD, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_shr.i32",   0b000100, 0xD, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_shr.i64",   0b000100, 0xD, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_shr.u8",    0b000100, 0xD, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_shr.u16",   0b000100, 0xD, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_shr.u32",   0b000100, 0xD, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_shr.u64",   0b000100, 0xD, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_sub.i8",    0b000100, 0xE, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_sub.i16",   0b000100, 0xE, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_sub.i32",   0b000100, 0xE, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_sub.i64",   0b000100, 0xE, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "c_sub.u8",    0b000100, 0xE, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "c_sub.u16",   0b000100, 0xE, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "c_sub.u32",   0b000100, 0xE, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "c_sub.u64",   0b000100, 0xE, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "c_sub_u.i8",  0b000100, 0xF, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "c_sub_u.i16", 0b000100, 0xF, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "c_sub_u.i32", 0b000100, 0xF, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "c_sub_u.i64", 0b000100, 0xF, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    // Overflowing Arithmetic
    // ----------------------
    instr!(r_type => "o_abs.i8",    0b000101, 0x0, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_abs.i16",   0b000101, 0x0, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_abs.i32",   0b000101, 0x0, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_abs.i64",   0b000101, 0x0, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_add.i8",    0b000101, 0x1, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_add.i16",   0b000101, 0x1, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_add.i32",   0b000101, 0x1, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_add.i64",   0b000101, 0x1, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_add.u8",    0b000101, 0x1, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_add.u16",   0b000101, 0x1, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_add.u32",   0b000101, 0x1, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_add.u64",   0b000101, 0x1, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_add_u.i8",  0b000101, 0x2, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_add_u.i16", 0b000101, 0x2, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_add_u.i32", 0b000101, 0x2, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_add_u.i64", 0b000101, 0x2, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_add_s.u8",  0b000101, 0x2, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_add_s.u16", 0b000101, 0x2, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_add_s.u32", 0b000101, 0x2, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_add_s.u64", 0b000101, 0x2, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_div.i8",    0b000101, 0x3, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_div.i16",   0b000101, 0x3, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_div.i32",   0b000101, 0x3, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_div.i64",   0b000101, 0x3, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_div.u8",    0b000101, 0x3, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_div.u16",   0b000101, 0x3, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_div.u32",   0b000101, 0x3, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_div.u64",   0b000101, 0x3, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_div_e.i8",  0b000101, 0x4, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_div_e.i16", 0b000101, 0x4, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_div_e.i32", 0b000101, 0x4, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_div_e.i64", 0b000101, 0x4, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_div_e.u8",  0b000101, 0x4, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_div_e.u16", 0b000101, 0x4, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_div_e.u32", 0b000101, 0x4, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_div_e.u64", 0b000101, 0x4, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_mul.i8",    0b000101, 0x7, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_mul.i16",   0b000101, 0x7, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_mul.i32",   0b000101, 0x7, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_mul.i64",   0b000101, 0x7, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_mul.u8",    0b000101, 0x7, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_mul.u16",   0b000101, 0x7, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_mul.u32",   0b000101, 0x7, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_mul.u64",   0b000101, 0x7, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_neg.i8",    0b000101, 0x8, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_neg.i16",   0b000101, 0x8, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_neg.i32",   0b000101, 0x8, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_neg.i64",   0b000101, 0x8, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_pow.i8",    0b000101, 0x9, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_pow.i16",   0b000101, 0x9, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_pow.i32",   0b000101, 0x9, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_pow.i64",   0b000101, 0x9, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_pow.u8",    0b000101, 0x9, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_pow.u16",   0b000101, 0x9, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_pow.u32",   0b000101, 0x9, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_pow.u64",   0b000101, 0x9, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_rem.i8",    0b000101, 0xA, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_rem.i16",   0b000101, 0xA, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_rem.i32",   0b000101, 0xA, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_rem.i64",   0b000101, 0xA, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_rem.u8",    0b000101, 0xA, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_rem.u16",   0b000101, 0xA, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_rem.u32",   0b000101, 0xA, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_rem.u64",   0b000101, 0xA, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_rem_e.i8",  0b000101, 0xB, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_rem_e.i16", 0b000101, 0xB, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_rem_e.i32", 0b000101, 0xB, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_rem_e.i64", 0b000101, 0xB, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_rem_e.u8",  0b000101, 0xB, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_rem_e.u16", 0b000101, 0xB, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_rem_e.u32", 0b000101, 0xB, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_rem_e.u64", 0b000101, 0xB, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_shl.i8",    0b000101, 0xC, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_shl.i16",   0b000101, 0xC, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_shl.i32",   0b000101, 0xC, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_shl.i64",   0b000101, 0xC, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_shl.u8",    0b000101, 0xC, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_shl.u16",   0b000101, 0xC, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_shl.u32",   0b000101, 0xC, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_shl.u64",   0b000101, 0xC, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_shr.i8",    0b000101, 0xD, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_shr.i16",   0b000101, 0xD, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_shr.i32",   0b000101, 0xD, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_shr.i64",   0b000101, 0xD, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_shr.u8",    0b000101, 0xD, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_shr.u16",   0b000101, 0xD, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_shr.u32",   0b000101, 0xD, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_shr.u64",   0b000101, 0xD, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_sub.i8",    0b000101, 0xE, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_sub.i16",   0b000101, 0xE, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_sub.i32",   0b000101, 0xE, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_sub.i64",   0b000101, 0xE, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "o_sub.u8",    0b000101, 0xE, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "o_sub.u16",   0b000101, 0xE, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "o_sub.u32",   0b000101, 0xE, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "o_sub.u64",   0b000101, 0xE, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "o_sub_u.i8",  0b000101, 0xF, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "o_sub_u.i16", 0b000101, 0xF, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "o_sub_u.i32", 0b000101, 0xF, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "o_sub_u.i64", 0b000101, 0xF, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    // Saturating Arithmetic
    // ---------------------
    instr!(r_type => "s_abs.i8",    0b000110, 0x0, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_abs.i16",   0b000110, 0x0, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_abs.i32",   0b000110, 0x0, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_abs.i64",   0b000110, 0x0, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_add.i8",    0b000110, 0x1, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_add.i16",   0b000110, 0x1, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_add.i32",   0b000110, 0x1, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_add.i64",   0b000110, 0x1, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_add.u8",    0b000110, 0x1, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "s_add.u16",   0b000110, 0x1, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "s_add.u32",   0b000110, 0x1, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "s_add.u64",   0b000110, 0x1, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "s_add_u.i8",  0b000110, 0x2, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_add_u.i16", 0b000110, 0x2, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_add_u.i32", 0b000110, 0x2, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_add_u.i64", 0b000110, 0x2, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_add_s.u8",  0b000110, 0x2, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "s_add_s.u16", 0b000110, 0x2, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "s_add_s.u32", 0b000110, 0x2, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "s_add_s.u64", 0b000110, 0x2, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "s_div.i8",    0b000110, 0x3, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_div.i16",   0b000110, 0x3, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_div.i32",   0b000110, 0x3, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_div.i64",   0b000110, 0x3, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_div.u8",    0b000110, 0x3, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "s_div.u16",   0b000110, 0x3, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "s_div.u32",   0b000110, 0x3, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "s_div.u64",   0b000110, 0x3, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "s_mul.i8",    0b000110, 0x7, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_mul.i16",   0b000110, 0x7, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_mul.i32",   0b000110, 0x7, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_mul.i64",   0b000110, 0x7, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_mul.u8",    0b000110, 0x7, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "s_mul.u16",   0b000110, 0x7, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "s_mul.u32",   0b000110, 0x7, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "s_mul.u64",   0b000110, 0x7, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "s_neg.i8",    0b000110, 0x8, [     rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_neg.i16",   0b000110, 0x8, [     rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_neg.i32",   0b000110, 0x8, [     rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_neg.i64",   0b000110, 0x8, [     rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_pow.i8",    0b000110, 0x9, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_pow.i16",   0b000110, 0x9, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_pow.i32",   0b000110, 0x9, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_pow.i64",   0b000110, 0x9, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_pow.u8",    0b000110, 0x9, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "s_pow.u16",   0b000110, 0x9, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "s_pow.u32",   0b000110, 0x9, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "s_pow.u64",   0b000110, 0x9, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "s_sub.i8",    0b000110, 0xE, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_sub.i16",   0b000110, 0xE, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_sub.i32",   0b000110, 0xE, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_sub.i64",   0b000110, 0xE, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    instr!(r_type => "s_sub.u8",    0b000110, 0xE, [rs2, rs1, rd], { size: 8,  s: 0, f: 0 }),
    instr!(r_type => "s_sub.u16",   0b000110, 0xE, [rs2, rs1, rd], { size: 16, s: 0, f: 0 }),
    instr!(r_type => "s_sub.u32",   0b000110, 0xE, [rs2, rs1, rd], { size: 32, s: 0, f: 0 }),
    instr!(r_type => "s_sub.u64",   0b000110, 0xE, [rs2, rs1, rd], { size: 64, s: 0, f: 0 }),
    instr!(r_type => "s_sub_u.i8",  0b000110, 0xF, [rs2, rs1, rd], { size: 8,  s: 1, f: 0 }),
    instr!(r_type => "s_sub_u.i16", 0b000110, 0xF, [rs2, rs1, rd], { size: 16, s: 1, f: 0 }),
    instr!(r_type => "s_sub_u.i32", 0b000110, 0xF, [rs2, rs1, rd], { size: 32, s: 1, f: 0 }),
    instr!(r_type => "s_sub_u.i64", 0b000110, 0xF, [rs2, rs1, rd], { size: 64, s: 1, f: 0 }),
    // Floating Point Arithmetic
    // -------------------------
    instr!(r_type => "abs.f32",   0b000111, 0x0, [     rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "abs.f64",   0b000111, 0x0, [     rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "add.f32",   0b000111, 0x1, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "add.f64",   0b000111, 0x1, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "div.f32",   0b000111, 0x3, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "div.f64",   0b000111, 0x3, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "div_e.f32", 0b000111, 0x4, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "div_e.f64", 0b000111, 0x4, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "log.f32",   0b000111, 0x5, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "log.f64",   0b000111, 0x5, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "sqrt.f32",  0b000111, 0x6, [     rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "sqrt.f64",  0b000111, 0x6, [     rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "mul.f32",   0b000111, 0x7, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "mul.f64",   0b000111, 0x7, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "neg.f32",   0b000111, 0x8, [     rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "neg.f64",   0b000111, 0x8, [     rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "pow.f32",   0b000111, 0x9, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "pow.f64",   0b000111, 0x9, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "rem.f32",   0b000111, 0xA, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "rem.f64",   0b000111, 0xA, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "rem_e.f32", 0b000111, 0xB, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "rem_e.f64", 0b000111, 0xB, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "cbrt.f32",  0b000111, 0xD, [     rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "cbrt.f64",  0b000111, 0xD, [     rs1, rd], { size: 64, s: 1, f: 1 }),
    instr!(r_type => "sub.f32",   0b000111, 0xE, [rs2, rs1, rd], { size: 32, s: 1, f: 1 }),
    instr!(r_type => "sub.f64",   0b000111, 0xE, [rs2, rs1, rd], { size: 64, s: 1, f: 1 }),
];

pub fn make_name_good(name: &str) -> String {
    let mut good_name = String::with_capacity(name.len());

    let mut seen_an_underscore = true;

    for c in name.bytes() {
        if c == b'_' {
            seen_an_underscore = true;
            good_name.push(c as char);
        } else if c == b'.' {
            good_name.push('_');
        } else {
            if seen_an_underscore {
                good_name.push(c.to_ascii_uppercase() as char);
                seen_an_underscore = false;
            } else {
                good_name.push(c as char);
            }
        }
    }

    good_name
}
